import * as PIXI from "pixi.js";

/** –ú–∞–ª—ã–π ¬´–≤–∑—Ä—ã–≤¬ª —á–∞—Å—Ç–∏—Ü –≤ —Ç–æ—á–∫–µ (–¥–ª—è –∫–ª–∏–∫–æ–≤/—Å–æ–±—ã—Ç–∏–π). */
export function particlesBurst(
  container: PIXI.Container,
  x: number,
  y: number,
  color = 0xffffff
) {
  const g = new PIXI.Container();
  container.addChild(g);

  const parts: PIXI.Graphics[] = [];
  const COUNT = 6; // –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ, –±–µ–∑ –ª–∞–≥–æ–≤

  for (let i = 0; i < COUNT; i++) {
    const p = new PIXI.Graphics();
    p.beginFill(color).drawCircle(0, 0, 2).endFill();
    p.x = x;
    p.y = y;

    const angle = Math.random() * Math.PI * 2;
    (p as any).vx = Math.cos(angle) * (70 + Math.random() * 70);
    (p as any).vy = Math.sin(angle) * (70 + Math.random() * 70);

    parts.push(p);
    g.addChild(p);
  }

  let life = 0.28;
  let last = performance.now();
  let raf = 0;

  function tick() {
    const now = performance.now();
    const dt = Math.min(0.05, (now - last) / 1000);
    last = now;

    life -= dt;
    const alpha = Math.max(0, life / 0.28);

    for (const p of parts) {
      p.x += (p as any).vx * dt;
      p.y += (p as any).vy * dt;
      p.alpha = alpha;
    }

    if (life > 0) {
      raf = requestAnimationFrame(tick);
    } else {
      for (const p of parts) p.destroy({ children: true });
      if (g.parent) g.parent.removeChild(g);
      g.destroy({ children: true });
      cancelAnimationFrame(raf);
    }
  }

  raf = requestAnimationFrame(tick);
}

/** –õ—ë–≥–∫–∞—è —Ç—Ä—è—Å–∫–∞ —Å—Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –±–æ–º–±–µ). */
export function screenShake(
  container: PIXI.Container,
  intensity = 6,
  durationMs = 200
) {
  const ox = container.x,
    oy = container.y;
  const start = performance.now();
  let raf = 0;

  function tick() {
    const t = performance.now() - start;
    if (t < durationMs) {
      container.x = ox + (Math.random() * 2 - 1) * intensity;
      container.y = oy + (Math.random() * 2 - 1) * intensity;
      raf = requestAnimationFrame(tick);
    } else {
      container.x = ox;
      container.y = oy;
      cancelAnimationFrame(raf);
    }
  }

  raf = requestAnimationFrame(tick);
}

/** –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –Ω–∞–¥–ø–∏—Å—å +N / -N –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞. */
export function floatingScore(
  container: PIXI.Container,
  x: number,
  y: number,
  value: number
) {
  const color = value >= 0 ? 0x00ff66 : 0xff4444; // –∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π
  const txt = new PIXI.Text(
    (value >= 0 ? "+" : "") + value,
    new PIXI.TextStyle({
      fontSize: 28,
      fill: color,
      fontWeight: "bold",
    })
  );

  txt.anchor.set(0.5);
  txt.x = x;
  txt.y = y;
  container.addChild(txt);

  let life = 0.8;
  let last = performance.now();

  function tick() {
    const now = performance.now();
    const dt = (now - last) / 1000;
    last = now;

    life -= dt;
    txt.y -= 30 * dt; // –≤—Å–ø–ª—ã–≤–∞–µ—Ç
    txt.alpha = Math.max(0, life / 0.8);

    if (life > 0) {
      requestAnimationFrame(tick);
    } else {
      if (txt.parent) txt.parent.removeChild(txt);
      txt.destroy();
    }
  }

  requestAnimationFrame(tick);
}

/** –ö—Ä—É–≥–æ–≤–∞—è –≤—Å–ø—ã—à–∫–∞ (—Ü–≤–µ—Ç –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º). */
export function flashEffect(
  container: PIXI.Container,
  x: number,
  y: number,
  color: number
) {
  const circle = new PIXI.Graphics();
  circle.beginFill(color, 0.5);
  circle.drawCircle(0, 0, 40); // –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–µ–π)
  circle.endFill();

  circle.x = x;
  circle.y = y;
  container.addChild(circle);

  let life = 0.4; // —Å–µ–∫
  let last = performance.now();

  function tick() {
    const now = performance.now();
    const dt = (now - last) / 1000;
    last = now;

    life -= dt;
    const progress = 1 - life / 0.4;

    circle.scale.set(1 + progress * 2); // —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    circle.alpha = 1 - progress; // –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–∞–Ω–∏–µ

    if (life > 0) {
      requestAnimationFrame(tick);
    } else {
      container.removeChild(circle);
      circle.destroy();
    }
  }

  requestAnimationFrame(tick);
}

/** –ì–æ–ª—É–±–æ–π ¬´–ª–µ–¥—è–Ω–æ–π¬ª –æ–≤–µ—Ä–ª–µ–π –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ). */
export function freezeOverlay(app: PIXI.Application) {
  const overlay = new PIXI.Graphics();
  overlay.beginFill(0x66ccff, 0.25);
  // –í Pixi v8 –∫–∞–Ω–≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ app.canvas
  const w = (app as any).canvas?.width ?? (app.view as any)?.width ?? 0;
  const h = (app as any).canvas?.height ?? (app.view as any)?.height ?? 0;
  overlay.drawRect(0, 0, w, h);
  overlay.endFill();
  overlay.alpha = 0;

  app.stage.addChild(overlay);

  let life = 0.6;
  let last = performance.now();

  function tick() {
    const now = performance.now();
    const dt = (now - last) / 1000;
    last = now;

    life -= dt;
    const progress = 1 - life / 0.6;

    // –≤—Å–ø–ª–µ—Å–∫ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ (sine)
    overlay.alpha = Math.sin(progress * Math.PI);

    if (life > 0) {
      requestAnimationFrame(tick);
    } else {
      app.stage.removeChild(overlay);
      overlay.destroy();
    }
  }

  requestAnimationFrame(tick);
}
// ‚ùÑÔ∏è –≠—Ñ—Ñ–µ–∫—Ç —Å–Ω–µ–≥–æ–ø–∞–¥–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ
export function snowEffect(container: PIXI.Container, durationMs: number) {
  const flakes: PIXI.Text[] = [];
  const COUNT = 20; // —Å–∫–æ–ª—å–∫–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ –∑–∞ —Ä–∞–∑

  for (let i = 0; i < COUNT; i++) {
    const flake = new PIXI.Text("‚ùÑÔ∏è", { fontSize: 20 });
    flake.x = Math.random() * (container.parent?.width || 400);
    flake.y = -Math.random() * 200; // —Å—Ç–∞—Ä—Ç—É—é—Ç —á—É—Ç—å –≤—ã—à–µ —ç–∫—Ä–∞–Ω–∞
    flake.alpha = 0.8;
    container.addChild(flake);
    flakes.push(flake);
  }

  let last = performance.now();
  let life = durationMs / 1000;

  function tick() {
    const now = performance.now();
    const dt = (now - last) / 1000;
    last = now;
    life -= dt;

    flakes.forEach(f => {
      f.y += 50 * dt; // –ø–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
      f.x += Math.sin(f.y / 20) * 0.5; // –ª—ë–≥–∫–æ–µ –∫–æ–ª—ã—Ö–∞–Ω–∏–µ
    });

    if (life > 0) {
      requestAnimationFrame(tick);
    } else {
      flakes.forEach(f => {
        if (f.parent) f.parent.removeChild(f);
        f.destroy();
      });
    }
  }

  requestAnimationFrame(tick);
}
/** üî¥ –§–ª—ç—à –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –±–æ–º–±–µ). */
export function screenFlash(app: PIXI.Application, color = 0xff0000, duration = 0.3) {
  const overlay = new PIXI.Graphics();
  const w = (app as any).canvas?.width ?? (app.view as any)?.width ?? 0;
  const h = (app as any).canvas?.height ?? (app.view as any)?.height ?? 0;

  overlay.beginFill(color, 1);
  overlay.drawRect(0, 0, w, h);
  overlay.endFill();
  overlay.alpha = 0;
  app.stage.addChild(overlay);

  let t = 0;
  let last = performance.now();

  function tick() {
    const now = performance.now();
    const dt = (now - last) / 1000;
    last = now;
    t += dt;

    // —Å–Ω–∞—á–∞–ª–∞ —è—Ä—á–µ, –ø–æ—Ç–æ–º –≥–∞—Å–Ω–µ—Ç
    const progress = t / duration;
    if (progress < 0.5) {
      overlay.alpha = progress * 2 * 0.5; // –¥–æ 0.5
    } else {
      overlay.alpha = (1 - progress) * 2 * 0.5; // –æ–±—Ä–∞—Ç–Ω–æ –∫ 0
    }

    if (progress < 1) {
      requestAnimationFrame(tick);
    } else {
      app.stage.removeChild(overlay);
      overlay.destroy();
    }
  }

  requestAnimationFrame(tick);
}